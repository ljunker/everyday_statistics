apiVersion: v1
data:
  .gitignore: |
    .idea
    .venv
    dbconn.env
    **/__pycache__/
  CODE_OF_CONDUCT.md: |
    # Contributor Covenant Code of Conduct

    ## Our Pledge

    We as members, contributors, and leaders pledge to make participation in our
    community a harassment-free experience for everyone, regardless of age, body
    size, visible or invisible disability, ethnicity, sex characteristics, gender
    identity and expression, level of experience, education, socio-economic status,
    nationality, personal appearance, race, religion, or sexual identity
    and orientation.

    We pledge to act and interact in ways that contribute to an open, welcoming,
    diverse, inclusive, and healthy community.

    ## Our Standards

    Examples of behavior that contributes to a positive environment for our
    community include:

    * Demonstrating empathy and kindness toward other people
    * Being respectful of differing opinions, viewpoints, and experiences
    * Giving and gracefully accepting constructive feedback
    * Accepting responsibility and apologizing to those affected by our mistakes,
      and learning from the experience
    * Focusing on what is best not just for us as individuals, but for the
      overall community

    Examples of unacceptable behavior include:

    * The use of sexualized language or imagery, and sexual attention or
      advances of any kind
    * Trolling, insulting or derogatory comments, and personal or political attacks
    * Public or private harassment
    * Publishing others' private information, such as a physical or email
      address, without their explicit permission
    * Other conduct which could reasonably be considered inappropriate in a
      professional setting

    ## Enforcement Responsibilities

    Community leaders are responsible for clarifying and enforcing our standards of
    acceptable behavior and will take appropriate and fair corrective action in
    response to any behavior that they deem inappropriate, threatening, offensive,
    or harmful.

    Community leaders have the right and responsibility to remove, edit, or reject
    comments, commits, code, wiki edits, issues, and other contributions that are
    not aligned to this Code of Conduct, and will communicate reasons for moderation
    decisions when appropriate.

    ## Scope

    This Code of Conduct applies within all community spaces, and also applies when
    an individual is officially representing the community in public spaces.
    Examples of representing our community include using an official e-mail address,
    posting via an official social media account, or acting as an appointed
    representative at an online or offline event.

    ## Enforcement

    Instances of abusive, harassing, or otherwise unacceptable behavior may be
    reported to the community leaders responsible for enforcement at
    larsjunker92@gmail.com.
    All complaints will be reviewed and investigated promptly and fairly.

    All community leaders are obligated to respect the privacy and security of the
    reporter of any incident.

    ## Enforcement Guidelines

    Community leaders will follow these Community Impact Guidelines in determining
    the consequences for any action they deem in violation of this Code of Conduct:

    ### 1. Correction

    **Community Impact**: Use of inappropriate language or other behavior deemed
    unprofessional or unwelcome in the community.

    **Consequence**: A private, written warning from community leaders, providing
    clarity around the nature of the violation and an explanation of why the
    behavior was inappropriate. A public apology may be requested.

    ### 2. Warning

    **Community Impact**: A violation through a single incident or series
    of actions.

    **Consequence**: A warning with consequences for continued behavior. No
    interaction with the people involved, including unsolicited interaction with
    those enforcing the Code of Conduct, for a specified period of time. This
    includes avoiding interactions in community spaces as well as external channels
    like social media. Violating these terms may lead to a temporary or
    permanent ban.

    ### 3. Temporary Ban

    **Community Impact**: A serious violation of community standards, including
    sustained inappropriate behavior.

    **Consequence**: A temporary ban from any sort of interaction or public
    communication with the community for a specified period of time. No public or
    private interaction with the people involved, including unsolicited interaction
    with those enforcing the Code of Conduct, is allowed during this period.
    Violating these terms may lead to a permanent ban.

    ### 4. Permanent Ban

    **Community Impact**: Demonstrating a pattern of violation of community
    standards, including sustained inappropriate behavior,  harassment of an
    individual, or aggression toward or disparagement of classes of individuals.

    **Consequence**: A permanent ban from any sort of public interaction within
    the community.

    ## Attribution

    This Code of Conduct is adapted from the [Contributor Covenant][homepage],
    version 2.0, available at
    https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

    Community Impact Guidelines were inspired by [Mozilla's code of conduct
    enforcement ladder](https://github.com/mozilla/diversity).

    [homepage]: https://www.contributor-covenant.org

    For answers to common questions about this code of conduct, see the FAQ at
    https://www.contributor-covenant.org/faq. Translations are available at
    https://www.contributor-covenant.org/translations.
  CONTRIBUTING.md: "# Contributing to Everyday Statistics Service\n\nThanks for your interest in contributing! \U0001F389\n\n---\n\n## \U0001F5C2️ What this project does\n\nThis is a simple, self-hosted service for tracking everyday events (like pooping, coffee, walks) using Flask, Postgres, and Docker Compose.  \nIt has API key authentication, a web dashboard, backups, user management, and more.\n\n---\n\n## \U0001FA9C How to get started\n\n1. **Fork this repo** and clone your fork locally.\n2. Create a new branch for your changes:\n   ```bash\n   git checkout -b my-feature-branch\n   ```\n\n3. **Run it locally**:\n   ```bash\n   docker-compose up --build\n   ```\n   Use the `.env` file to set your API key and DB credentials.\n\n4. Make your changes! ✨\n\n5. **Write clear commit messages.**\n\n6. Push to your fork and open a **pull request**.  \n   Describe what your change does and why it’s useful.\n\n---\n\n## ✅ What’s welcome\n\n- Fix bugs \U0001F41B\n- Add new stats, insights, or charts \U0001F4CA\n- Improve the frontend (UI/UX) ✨\n- Add more endpoints or filters \U0001F511\n- Polish docs \U0001F4DA\n- Help with tests \U0001F9EA\n\n---\n\n## ⚡ Code style\n\n- Keep it simple and readable.\n- Use existing Python, Flask, and SQLAlchemy patterns.\n- Add comments if something’s not obvious.\n\n---\n\n## \U0001F512 Security\n\nIf you find a security issue (e.g., API key handling, auth bugs), **please report it privately** first instead of opening a public issue.\n\n---\n\n## \U0001F4AC Code of conduct\n\nBe respectful, constructive, and collaborative.  \nNo poop jokes that cross the line. \U0001F609\U0001F9FB\n\n---\n\nThanks for helping make Everyday Statistics better! \U0001F6BD✨\n"
  Dockerfile: |
    # Use an official Python image
    FROM python:3.12

    WORKDIR /app

    COPY requirements.txt .
    RUN pip install --no-cache-dir -r requirements.txt

    COPY src/ ./src

    ENV PYTHONPATH=/app

    CMD ["python", "src/app.py"]
  LICENSE: |
    MIT License

    Copyright (c) 2025 Lars Junker

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
  README.md: "# Everyday Statistics Service \U0001F6BD\U0001F4CA\n\nA tiny Flask + PostgreSQL service to track everyday events — like when you poop!  \nBuilt for fun, stats, and easy expansion. Containerized with Docker Compose.\n\n---\n\n⚠️ **WARNING: This project is under active development**\n\nThis service is experimental and may change or break at any time.  \nIt is **not stable for production use yet** — expect breaking changes, bugs, and incomplete features.\n\nUse it at your own risk and always back up your data!\n\n---\n\n## \U0001F680 Getting Started\n\n### 1️⃣ Clone the repo\n\n```bash\ngit clone git@github.com:ljunker/everyday_statistics.git everyday_statistics\ncd everyday_statistics\n```\n\n---\n\n### 2️⃣ Create your `.env`\n\nCopy the `dbconn.env.example` to `dbconn.env`:\n\n```bash\ncp dbconn.env.example dbconn.env\n```\nConfigure the postgres user, password and db to anything you like (but make it secure ffs...).\nThe `DATABASE_URL` `PROMETHEUS_SECRET_KEY` and `FLASK_SECRET_KEY` are for the flask server. Generate a good secret key with:\n\n```bash\nopenssl rand -hex 32\n```\n\nThen copy the generated key into your `.env` file as `FLASK_SECRET_KEY`.\n\n---\n\n### 3️⃣ Initialize the database\n\nBefore first run, create the tables:\n\n```bash\ndocker compose run web flask shell\n```\n\nInside the Flask shell:\n\n```python\nfrom src.app import db\n\ndb.create_all()\nexit()\n```\n\nThen create an admin user with\n\n```bash\ndocker compose run web flask create-admin\n```\n\nYou can create additional users later via the web app.\n\n### 4️⃣ Build & start services\n\nUse Docker Compose to build and run everything:\n\n```bash\ndocker compose up --build\n```\n\nAdd `-d` to run in detached mode (background).\n\nThis starts:\n- `db` → PostgreSQL database\n- `web` → Flask app\n\n---\n\n## \U0001F511 Authentication\n\nAll requests must include the `X-API-KEY` header. It will be generated when you create a user.\n\nExample header:\n```\nX-API-KEY: supersecretkey\n```\n\n---\n\n## \U0001F9EA Example API Usage\n\n**Record an event:**\n\n```bash\ncurl -X POST http://localhost:5000/events   -H \"Content-Type: application/json\"   -H \"X-API-KEY: supersecretkey\"   -d '{\"type\": \"poop\"}'\n```\n\n**Get stats:**\n\n```bash\ncurl http://localhost:5000/stats   -H \"X-API-KEY: supersecretkey\"\n```\n\n---\n\n## ⚙️ Common Commands\n\n\U0001F504 **Force rebuild everything:**\n\n```bash\ndocker compose up --build --force-recreate --remove-orphans\n```\n\n---\n\n## \U0001F4A1 Tips\n\n- ✅ Keep your `.env` out of version control (`.gitignore` it!).\n- ✅ For production, consider using Docker secrets for API keys.  \n\n---\n"
  SECURITY.md: |
    # Security Policy

    ## Reporting a Vulnerability

    Use this section to tell people how to report a vulnerability.

    Tell them where to go, how often they can expect to get an update on a
    reported vulnerability, what to expect if the vulnerability is accepted or
    declined, etc.
  alembic.ini: |
    # A generic, single database configuration.

    [alembic]
    # path to migration scripts.
    # this is typically a path given in POSIX (e.g. forward slashes)
    # format, relative to the token %(here)s which refers to the location of this
    # ini file
    script_location = %(here)s/migrations

    # template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
    # Uncomment the line below if you want the files to be prepended with date and time
    # see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
    # for all available tokens
    # file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

    # sys.path path, will be prepended to sys.path if present.
    # defaults to the current working directory.  for multiple paths, the path separator
    # is defined by "path_separator" below.
    prepend_sys_path = .


    # timezone to use when rendering the date within the migration file
    # as well as the filename.
    # If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
    # Any required deps can installed by adding `alembic[tz]` to the pip requirements
    # string value is passed to ZoneInfo()
    # leave blank for localtime
    # timezone =

    # max length of characters to apply to the "slug" field
    # truncate_slug_length = 40

    # set to 'true' to run the environment during
    # the 'revision' command, regardless of autogenerate
    # revision_environment = false

    # set to 'true' to allow .pyc and .pyo files without
    # a source .py file to be detected as revisions in the
    # versions/ directory
    # sourceless = false

    # version location specification; This defaults
    # to <script_location>/versions.  When using multiple version
    # directories, initial revisions must be specified with --version-path.
    # The path separator used here should be the separator specified by "path_separator"
    # below.
    # version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

    # path_separator; This indicates what character is used to split lists of file
    # paths, including version_locations and prepend_sys_path within configparser
    # files such as alembic.ini.
    # The default rendered in new alembic.ini files is "os", which uses os.pathsep
    # to provide os-dependent path splitting.
    #
    # Note that in order to support legacy alembic.ini files, this default does NOT
    # take place if path_separator is not present in alembic.ini.  If this
    # option is omitted entirely, fallback logic is as follows:
    #
    # 1. Parsing of the version_locations option falls back to using the legacy
    #    "version_path_separator" key, which if absent then falls back to the legacy
    #    behavior of splitting on spaces and/or commas.
    # 2. Parsing of the prepend_sys_path option falls back to the legacy
    #    behavior of splitting on spaces, commas, or colons.
    #
    # Valid values for path_separator are:
    #
    # path_separator = :
    # path_separator = ;
    # path_separator = space
    # path_separator = newline
    #
    # Use os.pathsep. Default configuration used for new projects.
    path_separator = os

    # set to 'true' to search source files recursively
    # in each "version_locations" directory
    # new in Alembic version 1.10
    # recursive_version_locations = false

    # the output encoding used when revision files
    # are written from script.py.mako
    # output_encoding = utf-8

    # database URL.  This is consumed by the user-maintained env.py script only.
    # other means of configuring database URLs may be customized within the env.py
    # file.
    sqlalchemy.url = postgresql://lars:test@db:5432/stats_db


    [post_write_hooks]
    # post_write_hooks defines scripts or Python functions that are run
    # on newly generated revision scripts.  See the documentation for further
    # detail and examples

    # format using "black" - use the console_scripts runner, against the "black" entrypoint
    # hooks = black
    # black.type = console_scripts
    # black.entrypoint = black
    # black.options = -l 79 REVISION_SCRIPT_FILENAME

    # lint with attempts to fix using "ruff" - use the exec runner, execute a binary
    # hooks = ruff
    # ruff.type = exec
    # ruff.executable = %(here)s/.venv/bin/ruff
    # ruff.options = check --fix REVISION_SCRIPT_FILENAME

    # Logging configuration.  This is also consumed by the user-maintained
    # env.py script only.
    [loggers]
    keys = root,sqlalchemy,alembic

    [handlers]
    keys = console

    [formatters]
    keys = generic

    [logger_root]
    level = WARNING
    handlers = console
    qualname =

    [logger_sqlalchemy]
    level = WARNING
    handlers =
    qualname = sqlalchemy.engine

    [logger_alembic]
    level = INFO
    handlers =
    qualname = alembic

    [handler_console]
    class = StreamHandler
    args = (sys.stderr,)
    level = NOTSET
    formatter = generic

    [formatter_generic]
    format = %(levelname)-5.5s [%(name)s] %(message)s
    datefmt = %H:%M:%S
  dbconn.env: |
    POSTGRES_USER=lars
    POSTGRES_PASSWORD=test
    POSTGRES_DB=stats_db
    DATABASE_URL=postgresql://lars:test@db:5432/stats_db
    API_KEY=13c8bf533f2c3a90ee1233d37a481df95f16da33e9cb4bcef5e59fc0bf59d8fa
    LOGIN_USER=lars
    LOGIN_PASS=LLrs1Lj5n:everyday
    FLASK_SECRET_KEY=4226f57610eb6497e3c8f3d46b86c86e7169a2c107f200cff4fa1f0ac1e7df99
    PROMETHEUS_API_KEY=cda4c17e92b7aad8b67f2ef4f1fdca0b6fd07adcb9d49ef3a7f0bc685b53010b
    POCKET_API_KEY=zlbB2tOFJkusK1CQYaqERKpjBNZHuFti
    POCKET_API_URL_BASE=https://pocket.njord.ljunker.de/api/
  dbconn.env.example: |-
    POSTGRES_USER=lars
    POSTGRES_PASSWORD=test
    POSTGRES_DB=stats_db
    DATABASE_URL=postgresql://lars:test@db:5432/stats_db
    FLASK_SECRET_KEY=supersecretflaskkey
    PROMETHEUS_API_KEY=supersecretprometheuskey
    POCKET_API_KEY=supersecretpocketkey
  docker-compose.yml: |
    services:
      db:
        image: postgres:17
        container_name: everyday_db
        env_file:
          - dbconn.env
        volumes:
          - pg_data:/var/lib/postgresql/data
        ports:
          - "5432:5432"
        restart: unless-stopped

      web:
        build: .
        container_name: everyday_web
        env_file:
          - dbconn.env
        ports:
          - "45000:5000"
        volumes:
          - .:/app
        depends_on:
          - db
        restart: unless-stopped

    volumes:
      pg_data:
  requirements-dev.txt: |-
    pytest
    pytest-flask
    pytest-mock
  requirements.txt: |-
    Flask==3.1.1
    Flask-SQLAlchemy==3.1.1
    psycopg2-binary==2.9.10
    alembic~=1.16.4
    Werkzeug~=3.1.3
    SQLAlchemy~=2.0.41
    pytz~=2025.2
    prometheus-client~=0.22.1
    requests~=2.32.4
    Flask-APScheduler~=1.13.1
  upgrade.sh: |+
    #!/bin/bash

    docker compose up --build --force-recreate --remove-orphans -d
    docker compose run --rm web alembic upgrade head

kind: ConfigMap
metadata:
  labels:
    io.kompose.service: web
  name: web-cm0
